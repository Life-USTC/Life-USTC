platform :ios do
  desc "Load ASC API Key information to use in subsequent lanes"
  lane :load_asc_api_key do
    app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_KEY"],
      is_key_content_base64: true,
      in_house: false, # detecting this via ASC private key not currently supported
    )
  end

  desc "Bump build number based on most recent TestFlight build number"
  lane :fetch_and_increment_build_number do
    # fetch read your app identifier defined in your Appfile
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    current_version = get_version_number(
      target: "Life@USTC", # replace with your main target, required if you have more than one non-test target
    )

    latest_build_number = latest_testflight_build_number(
      api_key: api_key,
      version: current_version,
      app_identifier: app_identifier,
    )
    increment_build_number(
      build_number: (latest_build_number + 1),
    )
  end

  desc "Installs signing certificate in the keychain and downloads provisioning profiles from App Store Connect"
  lane :prepare_signing do |options|
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    keychain_name = "signing"
    keychain_password = "temp"

    delete_keychain(
      name: keychain_name,
    ) if File.exist? File.expand_path("~/Library/Keychains/#{keychain_name}-db")

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600,
    )

    # import_certificate(
    #   certificate_path: ENV["SIGNING_KEY_FILE_PATH"],
    #   certificate_password: ENV["SIGNING_KEY_PASSWORD"],
    #   keychain_name: keychain_name,
    #   keychain_password: keychain_password,
    # )

    match(type: "appstore")

    # fetches and installs provisioning profiles from ASC
    # sigh(
    #   api_key: api_key,
    # )
  end

  desc "Build the iOS app for release"
  lane :build_release do |options|
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

    profile_name = "dev.tiankaima.Life-USTC AppStore" # replace with the name of the profile to use for the build
    output_name = "Life@USTC" # specify the name of the .ipa file to generate
    export_method = "app-store" # specify the export method

    # turn off automatic signing during build so correct code signing identity is guaranteed to be used
    # update_code_signing_settings(
    #   use_automatic_signing: false,
    #   targets: ["Life@USTC", "Widget iOS"], # specify which targets to update code signing settings for
    #   code_sign_identity: "Apple Distribution", # replace with name of code signing identity if different
    #   bundle_identifier: app_identifier,
    #   profile_name: profile_name,
    #   build_configurations: ["Release"], # only toggle code signing settings for Release configurations
    # )

    xcode_select("/Applications/Xcode_14.3.1.app")

    # build the app
    gym(
      scheme: "Life@USTC", # replace with name of your project’s scheme
      output_name: output_name,
      configuration: "Release",
      export_options: {
        method: export_method,
        provisioningProfiles: {
          app_identifier => profile_name, # here you can add any additional bundle identifiers and their associated provisioning profiles if you’re also building an app extension or other bundle identifier
        },
        "dev.tiankaima.Life-USTC.Widget" => "dev.tiankaima.Life-USTC.Widget AppStore",
      },
    )
  end

  desc "Upload to TestFlight / ASC"
  lane :upload_release do
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    deliver(
      api_key: api_key,
      skip_screenshots: true,
      skip_metadata: true,
      skip_app_version_update: true,
      force: true, # skips verification of HTML preview file (since this will be run from a CI machine)
      run_precheck_before_submit: false, # not supported through ASC API yet
    )
  end

  desc "Build and upload to TestFlight"
  lane :build_upload_testflight do
    load_asc_api_key
    prepare_signing
    fetch_and_increment_build_number
    build_release
    upload_release
  end

  desc "Build only"
  lane :build_only do
    load_asc_api_key
    prepare_signing
    fetch_and_increment_build_number
    build_release
  end
end
