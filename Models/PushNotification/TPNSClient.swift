//
//  TPNSClient.swift
//  Life@USTC
//
//  Created by Tiankai Ma on 2023-04-24.
//

import CryptoKit
import Foundation

enum TPNSClientError: Error {
    case noAccessID
    case noSecretKey
    case emptyParameter
}

enum TPNSClient {
    func makeSignedRequest(message: String) async throws -> URLRequest {
        // TPNS document requires HMAC-SHA256, methods are described as the following:
        // each request should be made with HTTP or HTTPS, using HTTPS for securiy reasons:

        // each HTTPS header should contain the following parameters:
        // timestamp in second
        // accessID, stored in userDefaults: UserDefaults with key "TPNSaccessID", throw error if not found
        // signature, generated by HMAC-SHA256, using SecretKey as key, and timestamp + accessID + original_message as message

        // SecretKey is also stored in userDefaults: UserDefaults with key "TPNSsecretKey", throw error if not found

        let timestamp = Int(Date().timeIntervalSince1970)
        guard
            let accessID = UserDefaults.appGroup.string(forKey: "TPNSaccessID")
        else { throw TPNSClientError.noAccessID }

        guard
            let secretKey = UserDefaults.appGroup.string(
                forKey: "TPNSsecretKey"
            )
        else { throw TPNSClientError.noSecretKey }

        if accessID.isEmpty || secretKey.isEmpty {
            throw TPNSClientError.emptyParameter
        }

        let signature = HMAC<SHA256>.authenticationCode(
            for: "\(timestamp)\(accessID)\(message)".data(using: .utf8)!,
            using: SymmetricKey(data: secretKey.data(using: .utf8)!)
        )

        // Base64 encode the signature

        let signatureBase64 = signature.compactMap {
            String(format: "%02x", $0)
        }.joined()

        // Send the request

        let url = URL(string: "https://api.tpns.tencent.com/v3/push/app")!
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("\(timestamp)", forHTTPHeaderField: "Timestamp")
        request.setValue(accessID, forHTTPHeaderField: "AccessId")
        request.setValue(signatureBase64, forHTTPHeaderField: "Sign")

        request.httpBody = message.data(using: .utf8)

        return request
    }
}
